#include "./utils/signedWadMath.huff"

#define function getTargetSaleTime(int256) view returns (int256)
#define function getVRGDAPrice(int256, uint256) view returns (uint256)
#define function targetPrice() view returns(int256)
#define function decayConstant() view returns(int256)
#define function perTimeUnit() view returns(int256)


// these will be overriden with the constructor flag
// The constructor logic will need to be copied within deploy scripts 
// in order to inline the correct constants 
#define constant TARGET_PRICE = 0x00       // ( int256 )
#define constant DECAY_CONSTANT = 0x00 // ( uint256 )
// Also will need to do this within the deploy script constructor
#define constant PER_TIME_UNIT = 0x00


// (int256 _targetPrice, int256 _priceDecayPercent)
// does the flag to override these exist?
#define macro GET_VRGDA_PRICE() = takes(2) returns(1) {
    // Inputs : [timeSinceStart, Sold]

    // toWadUnsafe(sold +1)
    swap1                   // [sold, timeSinceStart]
    0x01                    // [1, sold, timeSinceStart]
    add                     // [1 + sold, timeSinceStart]
    TO_WAD_UNSAFE()         // [wad(1 + sold), timeSinceStart]
    GET_TARGET_SALE_TIME()  // TODO: UPDATE STACK AFTER ADDING THIS

    swap1                   // (timeSinceStart, wad(1 + sold))
    sub                     // (timeSinceStart - wad(1 + sold), wad(1 + sold))

    [DECAY_CONSTANT]         // [decayConst, timeSinceStart - wad(1 + sold))]
    UNSAFE_WAD_MUL()        
    EXP_WAD(fail)

    [TARGET_PRICE]
    WAD_MUL()

    0x00 mstore
    0x20 0x00 return

    fail: 
        0x00 dup1 revert
}

#define macro GET_VRGDA_PRICE_EXTERNAL() = {
    0x24 calldataload       // [sold]
    0x04 calldataload       // [timesinceStart, sold]
    
    GET_VRGDA_PRICE()       // returns inside
}

#define macro GET_TARGET_SALE_TIME() = takes(1) returns(0) {
    // init state = [sold]
    [PER_TIME_UNIT]             // [perTimeUnit, sold]
    swap1                       // [sold, perTimeUnit]
    UNSAFE_WAD_DIV()            // [sold / perTimeUnit] (targetSaleTime)
}

#define macro GET_TARGET_SALE_TIME_EXTERNAL() = {
    0x04 calldataload           // [sold]
    GET_TARGET_SALE_TIME()      // [targetSaleTime]
    __RETURN_STACK_ITEM_ONE()   // *return targetSaleTime
}


/** Return Consant
 * @notice Returns a constant provided as an arg
 * @param _constant The constant to return
 */
#define macro RETURN_CONSTANT(constant) = takes(1) returns(0) {
    <constant> __RETURN_STACK_ITEM_ONE()
}

/** Return Stack Item One
 * @notice Returns the item currently at the top of the stack
 * @dev 32 bytes only  
 */
#define macro __RETURN_STACK_ITEM_ONE() = takes(1) returns(0) {
    0x00 mstore
    0x20 0x00 return
}


#define macro MAIN() = {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(getVRGDAPrice) eq getVRGDAPrice jumpi
    dup1 __FUNC_SIG(getTargetSaleTime) eq getTargetSaleTime jumpi
    dup1 __FUNC_SIG(targetPrice) eq targetPrice jumpi
    dup1 __FUNC_SIG(decayConstant) eq decayConstant jumpi
    dup1 __FUNC_SIG(perTimeUnit) eq perTimeUnit jumpi

    0x00 dup1 revert

    getVRGDAPrice:
        GET_VRGDA_PRICE_EXTERNAL()
    getTargetSaleTime:
        GET_TARGET_SALE_TIME_EXTERNAL()
    targetPrice:
        RETURN_CONSTANT(TARGET_PRICE)
    decayConstant:
        RETURN_CONSTANT(DECAY_CONSTANT)
    perTimeUnit:
        RETURN_CONSTANT(PER_TIME_UNIT)    
}